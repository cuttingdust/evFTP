// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XMsgCom.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_XMsgCom_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_XMsgCom_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "XMsgType.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_XMsgCom_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_XMsgCom_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_XMsgCom_2eproto;
namespace XMsg {
class XLoginReq;
struct XLoginReqDefaultTypeInternal;
extern XLoginReqDefaultTypeInternal _XLoginReq_default_instance_;
class XLoginRes;
struct XLoginResDefaultTypeInternal;
extern XLoginResDefaultTypeInternal _XLoginRes_default_instance_;
class XMsgHead;
struct XMsgHeadDefaultTypeInternal;
extern XMsgHeadDefaultTypeInternal _XMsgHead_default_instance_;
}  // namespace XMsg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace XMsg {
enum XLoginRes_XLoginResType : int {
  XLoginRes_XLoginResType_XRT_OK = 0,
  XLoginRes_XLoginResType_XRT_ERR = 1,
  XLoginRes_XLoginResType_XRT_NO_USER = 2,
  XLoginRes_XLoginResType_XLoginRes_XLoginResType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  XLoginRes_XLoginResType_XLoginRes_XLoginResType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool XLoginRes_XLoginResType_IsValid(int value);
extern const uint32_t XLoginRes_XLoginResType_internal_data_[];
constexpr XLoginRes_XLoginResType XLoginRes_XLoginResType_XLoginResType_MIN = static_cast<XLoginRes_XLoginResType>(0);
constexpr XLoginRes_XLoginResType XLoginRes_XLoginResType_XLoginResType_MAX = static_cast<XLoginRes_XLoginResType>(2);
constexpr int XLoginRes_XLoginResType_XLoginResType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
XLoginRes_XLoginResType_descriptor();
template <typename T>
const std::string& XLoginRes_XLoginResType_Name(T value) {
  static_assert(std::is_same<T, XLoginRes_XLoginResType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to XLoginResType_Name().");
  return XLoginRes_XLoginResType_Name(static_cast<XLoginRes_XLoginResType>(value));
}
template <>
inline const std::string& XLoginRes_XLoginResType_Name(XLoginRes_XLoginResType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<XLoginRes_XLoginResType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool XLoginRes_XLoginResType_Parse(absl::string_view name, XLoginRes_XLoginResType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<XLoginRes_XLoginResType>(
      XLoginRes_XLoginResType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class XMsgHead final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XMsg.XMsgHead) */ {
 public:
  inline XMsgHead() : XMsgHead(nullptr) {}
  ~XMsgHead() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR XMsgHead(::google::protobuf::internal::ConstantInitialized);

  inline XMsgHead(const XMsgHead& from)
      : XMsgHead(nullptr, from) {}
  XMsgHead(XMsgHead&& from) noexcept
    : XMsgHead() {
    *this = ::std::move(from);
  }

  inline XMsgHead& operator=(const XMsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline XMsgHead& operator=(XMsgHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XMsgHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const XMsgHead* internal_default_instance() {
    return reinterpret_cast<const XMsgHead*>(
               &_XMsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XMsgHead& a, XMsgHead& b) {
    a.Swap(&b);
  }
  inline void Swap(XMsgHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XMsgHead* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XMsgHead* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XMsgHead>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XMsgHead& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const XMsgHead& from) {
    XMsgHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(XMsgHead* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "XMsg.XMsgHead";
  }
  protected:
  explicit XMsgHead(::google::protobuf::Arena* arena);
  XMsgHead(::google::protobuf::Arena* arena, const XMsgHead& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kServerNameFieldNumber = 4,
    kMsgSizeFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
  };
  // string token = 3;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string serverName = 4;
  void clear_servername() ;
  const std::string& servername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_servername(Arg_&& arg, Args_... args);
  std::string* mutable_servername();
  PROTOBUF_NODISCARD std::string* release_servername();
  void set_allocated_servername(std::string* value);

  private:
  const std::string& _internal_servername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servername(
      const std::string& value);
  std::string* _internal_mutable_servername();

  public:
  // int32 msgSize = 1;
  void clear_msgsize() ;
  ::int32_t msgsize() const;
  void set_msgsize(::int32_t value);

  private:
  ::int32_t _internal_msgsize() const;
  void _internal_set_msgsize(::int32_t value);

  public:
  // .XMsg.MsgType msgType = 2;
  void clear_msgtype() ;
  ::XMsg::MsgType msgtype() const;
  void set_msgtype(::XMsg::MsgType value);

  private:
  ::XMsg::MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::XMsg::MsgType value);

  public:
  // @@protoc_insertion_point(class_scope:XMsg.XMsgHead)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr servername_;
    ::int32_t msgsize_;
    int msgtype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_XMsgCom_2eproto;
};// -------------------------------------------------------------------

class XLoginRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XMsg.XLoginRes) */ {
 public:
  inline XLoginRes() : XLoginRes(nullptr) {}
  ~XLoginRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR XLoginRes(::google::protobuf::internal::ConstantInitialized);

  inline XLoginRes(const XLoginRes& from)
      : XLoginRes(nullptr, from) {}
  XLoginRes(XLoginRes&& from) noexcept
    : XLoginRes() {
    *this = ::std::move(from);
  }

  inline XLoginRes& operator=(const XLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline XLoginRes& operator=(XLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const XLoginRes* internal_default_instance() {
    return reinterpret_cast<const XLoginRes*>(
               &_XLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(XLoginRes& a, XLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(XLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XLoginRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XLoginRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XLoginRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XLoginRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const XLoginRes& from) {
    XLoginRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(XLoginRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "XMsg.XLoginRes";
  }
  protected:
  explicit XLoginRes(::google::protobuf::Arena* arena);
  XLoginRes(::google::protobuf::Arena* arena, const XLoginRes& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using XLoginResType = XLoginRes_XLoginResType;
  static constexpr XLoginResType XRT_OK = XLoginRes_XLoginResType_XRT_OK;
  static constexpr XLoginResType XRT_ERR = XLoginRes_XLoginResType_XRT_ERR;
  static constexpr XLoginResType XRT_NO_USER = XLoginRes_XLoginResType_XRT_NO_USER;
  static inline bool XLoginResType_IsValid(int value) {
    return XLoginRes_XLoginResType_IsValid(value);
  }
  static constexpr XLoginResType XLoginResType_MIN = XLoginRes_XLoginResType_XLoginResType_MIN;
  static constexpr XLoginResType XLoginResType_MAX = XLoginRes_XLoginResType_XLoginResType_MAX;
  static constexpr int XLoginResType_ARRAYSIZE = XLoginRes_XLoginResType_XLoginResType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* XLoginResType_descriptor() {
    return XLoginRes_XLoginResType_descriptor();
  }
  template <typename T>
  static inline const std::string& XLoginResType_Name(T value) {
    return XLoginRes_XLoginResType_Name(value);
  }
  static inline bool XLoginResType_Parse(absl::string_view name, XLoginResType* value) {
    return XLoginRes_XLoginResType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kResTypeFieldNumber = 1,
  };
  // string token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // .XMsg.XLoginRes.XLoginResType resType = 1;
  void clear_restype() ;
  ::XMsg::XLoginRes_XLoginResType restype() const;
  void set_restype(::XMsg::XLoginRes_XLoginResType value);

  private:
  ::XMsg::XLoginRes_XLoginResType _internal_restype() const;
  void _internal_set_restype(::XMsg::XLoginRes_XLoginResType value);

  public:
  // @@protoc_insertion_point(class_scope:XMsg.XLoginRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr token_;
    int restype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_XMsgCom_2eproto;
};// -------------------------------------------------------------------

class XLoginReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XMsg.XLoginReq) */ {
 public:
  inline XLoginReq() : XLoginReq(nullptr) {}
  ~XLoginReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR XLoginReq(::google::protobuf::internal::ConstantInitialized);

  inline XLoginReq(const XLoginReq& from)
      : XLoginReq(nullptr, from) {}
  XLoginReq(XLoginReq&& from) noexcept
    : XLoginReq() {
    *this = ::std::move(from);
  }

  inline XLoginReq& operator=(const XLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline XLoginReq& operator=(XLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const XLoginReq* internal_default_instance() {
    return reinterpret_cast<const XLoginReq*>(
               &_XLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XLoginReq& a, XLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(XLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XLoginReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XLoginReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XLoginReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XLoginReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const XLoginReq& from) {
    XLoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(XLoginReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "XMsg.XLoginReq";
  }
  protected:
  explicit XLoginReq(::google::protobuf::Arena* arena);
  XLoginReq(::google::protobuf::Arena* arena, const XLoginReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:XMsg.XLoginReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_XMsgCom_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// XMsgHead

// int32 msgSize = 1;
inline void XMsgHead::clear_msgsize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgsize_ = 0;
}
inline ::int32_t XMsgHead::msgsize() const {
  // @@protoc_insertion_point(field_get:XMsg.XMsgHead.msgSize)
  return _internal_msgsize();
}
inline void XMsgHead::set_msgsize(::int32_t value) {
  _internal_set_msgsize(value);
  // @@protoc_insertion_point(field_set:XMsg.XMsgHead.msgSize)
}
inline ::int32_t XMsgHead::_internal_msgsize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msgsize_;
}
inline void XMsgHead::_internal_set_msgsize(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msgsize_ = value;
}

// .XMsg.MsgType msgType = 2;
inline void XMsgHead::clear_msgtype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgtype_ = 0;
}
inline ::XMsg::MsgType XMsgHead::msgtype() const {
  // @@protoc_insertion_point(field_get:XMsg.XMsgHead.msgType)
  return _internal_msgtype();
}
inline void XMsgHead::set_msgtype(::XMsg::MsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:XMsg.XMsgHead.msgType)
}
inline ::XMsg::MsgType XMsgHead::_internal_msgtype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::XMsg::MsgType>(_impl_.msgtype_);
}
inline void XMsgHead::_internal_set_msgtype(::XMsg::MsgType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msgtype_ = value;
}

// string token = 3;
inline void XMsgHead::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& XMsgHead::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:XMsg.XMsgHead.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XMsgHead::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:XMsg.XMsgHead.token)
}
inline std::string* XMsgHead::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:XMsg.XMsgHead.token)
  return _s;
}
inline const std::string& XMsgHead::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void XMsgHead::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* XMsgHead::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* XMsgHead::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:XMsg.XMsgHead.token)
  return _impl_.token_.Release();
}
inline void XMsgHead::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XMsg.XMsgHead.token)
}

// string serverName = 4;
inline void XMsgHead::clear_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.servername_.ClearToEmpty();
}
inline const std::string& XMsgHead::servername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:XMsg.XMsgHead.serverName)
  return _internal_servername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XMsgHead::set_servername(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.servername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:XMsg.XMsgHead.serverName)
}
inline std::string* XMsgHead::mutable_servername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_servername();
  // @@protoc_insertion_point(field_mutable:XMsg.XMsgHead.serverName)
  return _s;
}
inline const std::string& XMsgHead::_internal_servername() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.servername_.Get();
}
inline void XMsgHead::_internal_set_servername(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.servername_.Set(value, GetArena());
}
inline std::string* XMsgHead::_internal_mutable_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.servername_.Mutable( GetArena());
}
inline std::string* XMsgHead::release_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:XMsg.XMsgHead.serverName)
  return _impl_.servername_.Release();
}
inline void XMsgHead::set_allocated_servername(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.servername_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.servername_.IsDefault()) {
          _impl_.servername_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XMsg.XMsgHead.serverName)
}

// -------------------------------------------------------------------

// XLoginReq

// string username = 1;
inline void XLoginReq::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& XLoginReq::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:XMsg.XLoginReq.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XLoginReq::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:XMsg.XLoginReq.username)
}
inline std::string* XLoginReq::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:XMsg.XLoginReq.username)
  return _s;
}
inline const std::string& XLoginReq::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void XLoginReq::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* XLoginReq::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* XLoginReq::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:XMsg.XLoginReq.username)
  return _impl_.username_.Release();
}
inline void XLoginReq::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XMsg.XLoginReq.username)
}

// string password = 2;
inline void XLoginReq::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& XLoginReq::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:XMsg.XLoginReq.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XLoginReq::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:XMsg.XLoginReq.password)
}
inline std::string* XLoginReq::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:XMsg.XLoginReq.password)
  return _s;
}
inline const std::string& XLoginReq::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void XLoginReq::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* XLoginReq::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* XLoginReq::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:XMsg.XLoginReq.password)
  return _impl_.password_.Release();
}
inline void XLoginReq::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XMsg.XLoginReq.password)
}

// -------------------------------------------------------------------

// XLoginRes

// .XMsg.XLoginRes.XLoginResType resType = 1;
inline void XLoginRes::clear_restype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.restype_ = 0;
}
inline ::XMsg::XLoginRes_XLoginResType XLoginRes::restype() const {
  // @@protoc_insertion_point(field_get:XMsg.XLoginRes.resType)
  return _internal_restype();
}
inline void XLoginRes::set_restype(::XMsg::XLoginRes_XLoginResType value) {
  _internal_set_restype(value);
  // @@protoc_insertion_point(field_set:XMsg.XLoginRes.resType)
}
inline ::XMsg::XLoginRes_XLoginResType XLoginRes::_internal_restype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::XMsg::XLoginRes_XLoginResType>(_impl_.restype_);
}
inline void XLoginRes::_internal_set_restype(::XMsg::XLoginRes_XLoginResType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.restype_ = value;
}

// string token = 2;
inline void XLoginRes::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& XLoginRes::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:XMsg.XLoginRes.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XLoginRes::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:XMsg.XLoginRes.token)
}
inline std::string* XLoginRes::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:XMsg.XLoginRes.token)
  return _s;
}
inline const std::string& XLoginRes::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void XLoginRes::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* XLoginRes::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* XLoginRes::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:XMsg.XLoginRes.token)
  return _impl_.token_.Release();
}
inline void XLoginRes::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XMsg.XLoginRes.token)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace XMsg


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::XMsg::XLoginRes_XLoginResType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::XMsg::XLoginRes_XLoginResType>() {
  return ::XMsg::XLoginRes_XLoginResType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_XMsgCom_2eproto_2epb_2eh
